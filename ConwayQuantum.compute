// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float> Texture;
RWTexture2D<float> TextureOut;

uniform int worldSize;
uniform int seed;
uniform int quantumInstability;

int2 clampUV(int2 uv) {
    return (uv+worldSize)%worldSize;
}

uint wang_hash(uint seed) {
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID){

    int neighbors=0;
    neighbors+=Texture[clampUV(id.xy+int2(  -1, -1  ))];
    neighbors+=Texture[clampUV(id.xy+int2(  0,  -1  ))];
    neighbors+=Texture[clampUV(id.xy+int2(  +1, -1  ))];
    neighbors+=Texture[clampUV(id.xy+int2(  -1, 0   ))];
    // neighbors+=Texture[     id.xy+int2(  0,  0   ) ]; // ignore self
    neighbors+=Texture[clampUV(id.xy+int2(  +1, 0   ))];
    neighbors+=Texture[clampUV(id.xy+int2(  -1, 1   ))];
    neighbors+=Texture[clampUV(id.xy+int2(  0,  1   ))];
    neighbors+=Texture[clampUV(id.xy+int2(  +1, 1   ))];
    
    
    
    int xyseed=id.x+id.y*worldSize+seed;
    uint quantumbit=wang_hash(xyseed)/quantumInstability;
    
    if (Texture[id.xy]>0.1) {        // Any live cell

        if (neighbors<2){               // Any live cell with fewer than two live neighbours dies, as if by underpopulation.

            TextureOut[id.xy] = 0;

        } else if (neighbors<=3){        // Any live cell with two or three live neighbours lives on to the next generation.    

            TextureOut[id.xy] = 1;

        } else {                        // Any live cell with more than three live neighbours dies, as if by overpopulation.    

            TextureOut[id.xy] = 0;

        }
    
    } else {                        // Any dead cell

        if (neighbors==3) {             // Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

            TextureOut[id.xy] = 1;

        } else if (neighbors==0) {      // dead stay dead
        
            //TextureOut[id.xy] = 0;
            TextureOut[id.xy] = 1-min(1,quantumbit);
            
        } else {                        // quantum jiggle if neighbor
        
            TextureOut[id.xy] = 1-min(1,quantumbit);
            
        }
    }
    
}
